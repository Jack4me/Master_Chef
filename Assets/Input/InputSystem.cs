//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""PlayerInputKeyboard"",
            ""id"": ""e1d72bf1-f98a-46aa-b975-ecf4d9148b20"",
            ""actions"": [
                {
                    ""name"": ""Keyboard"",
                    ""type"": ""Value"",
                    ""id"": ""3cd9213d-b307-436e-a645-87765fb1156f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""InteractButton"",
                    ""type"": ""Button"",
                    ""id"": ""2332cb19-43de-4403-b46e-efac913ce3c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InteractButtonAlternate"",
                    ""type"": ""Button"",
                    ""id"": ""6e60c705-da0e-4044-9e17-76b9b8e54f58"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""cacea3b9-e6de-4eee-bdd5-48bf83de85d7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keyboard"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6aa3b5ad-9150-4ce8-adca-ae7a4ecc4e57"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1c4fe202-8ca6-469f-9384-83447989c752"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cb095edb-425d-4170-bbc4-8d1765fdc6db"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""25bdd718-da52-48f2-ace8-083eac7fde1f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d9a1ae67-337f-49e7-bdcd-f2fb197118d5"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InteractButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""125bc007-7d0b-4151-a365-680723666a18"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InteractButtonAlternate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerInputKeyboard
        m_PlayerInputKeyboard = asset.FindActionMap("PlayerInputKeyboard", throwIfNotFound: true);
        m_PlayerInputKeyboard_Keyboard = m_PlayerInputKeyboard.FindAction("Keyboard", throwIfNotFound: true);
        m_PlayerInputKeyboard_InteractButton = m_PlayerInputKeyboard.FindAction("InteractButton", throwIfNotFound: true);
        m_PlayerInputKeyboard_InteractButtonAlternate = m_PlayerInputKeyboard.FindAction("InteractButtonAlternate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerInputKeyboard
    private readonly InputActionMap m_PlayerInputKeyboard;
    private IPlayerInputKeyboardActions m_PlayerInputKeyboardActionsCallbackInterface;
    private readonly InputAction m_PlayerInputKeyboard_Keyboard;
    private readonly InputAction m_PlayerInputKeyboard_InteractButton;
    private readonly InputAction m_PlayerInputKeyboard_InteractButtonAlternate;
    public struct PlayerInputKeyboardActions
    {
        private @InputSystem m_Wrapper;
        public PlayerInputKeyboardActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Keyboard => m_Wrapper.m_PlayerInputKeyboard_Keyboard;
        public InputAction @InteractButton => m_Wrapper.m_PlayerInputKeyboard_InteractButton;
        public InputAction @InteractButtonAlternate => m_Wrapper.m_PlayerInputKeyboard_InteractButtonAlternate;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInputKeyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInputKeyboardActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerInputKeyboardActions instance)
        {
            if (m_Wrapper.m_PlayerInputKeyboardActionsCallbackInterface != null)
            {
                @Keyboard.started -= m_Wrapper.m_PlayerInputKeyboardActionsCallbackInterface.OnKeyboard;
                @Keyboard.performed -= m_Wrapper.m_PlayerInputKeyboardActionsCallbackInterface.OnKeyboard;
                @Keyboard.canceled -= m_Wrapper.m_PlayerInputKeyboardActionsCallbackInterface.OnKeyboard;
                @InteractButton.started -= m_Wrapper.m_PlayerInputKeyboardActionsCallbackInterface.OnInteractButton;
                @InteractButton.performed -= m_Wrapper.m_PlayerInputKeyboardActionsCallbackInterface.OnInteractButton;
                @InteractButton.canceled -= m_Wrapper.m_PlayerInputKeyboardActionsCallbackInterface.OnInteractButton;
                @InteractButtonAlternate.started -= m_Wrapper.m_PlayerInputKeyboardActionsCallbackInterface.OnInteractButtonAlternate;
                @InteractButtonAlternate.performed -= m_Wrapper.m_PlayerInputKeyboardActionsCallbackInterface.OnInteractButtonAlternate;
                @InteractButtonAlternate.canceled -= m_Wrapper.m_PlayerInputKeyboardActionsCallbackInterface.OnInteractButtonAlternate;
            }
            m_Wrapper.m_PlayerInputKeyboardActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Keyboard.started += instance.OnKeyboard;
                @Keyboard.performed += instance.OnKeyboard;
                @Keyboard.canceled += instance.OnKeyboard;
                @InteractButton.started += instance.OnInteractButton;
                @InteractButton.performed += instance.OnInteractButton;
                @InteractButton.canceled += instance.OnInteractButton;
                @InteractButtonAlternate.started += instance.OnInteractButtonAlternate;
                @InteractButtonAlternate.performed += instance.OnInteractButtonAlternate;
                @InteractButtonAlternate.canceled += instance.OnInteractButtonAlternate;
            }
        }
    }
    public PlayerInputKeyboardActions @PlayerInputKeyboard => new PlayerInputKeyboardActions(this);
    public interface IPlayerInputKeyboardActions
    {
        void OnKeyboard(InputAction.CallbackContext context);
        void OnInteractButton(InputAction.CallbackContext context);
        void OnInteractButtonAlternate(InputAction.CallbackContext context);
    }
}
